Var
// *********************In en outputs*********************************
// Temp Haard 1		
	Temp1_ModState:	Int		at %vl 100020000; //Temp haard 1 module status
	Temp1R:			Float	at %vl 100020002; //Temp haard 1 rechts
	Temp1L:			Float	at %vl 100020003; //Temp haard 1 links
	ComTemp1R:		Int		at %vl 100021101; //Command register Haard 1 rechts
	ComTemp1L:		Int		at %vl 100021201; //Command register Haard 1 links
	StatTemp1R:		Int		at %vl 100021100; //Temp haard 1 rechter status
	StatTemp1L:		Int		at %vl 100021200; //Temp haard 1 linker status
	AvgTemp1R:		Int		at %vl 100021106; //Temperatuur 1 meting uitmiddelen rechts
	AvgTemp1L:		Int		at %vl 100021206; //Temperatuur 1 meting uitmiddelen Links
//Temp haard 2	
	Temp2_ModState:	Int		at %vl 100030000; //Temp haard 2 module status
	Temp2R:			Float	at %vl 100030002; //Temp haard 2 rechts
	Temp2L:			Float	at %vl 100030003; //Temp haard 2 links
	ComTemp2R:		Int		at %vl 100031101; //Command register Haard 2 rechts
	ComTemp2L:		Int		at %vl 100031201; //Command register Haard 2 links
	StatTemp2R:		Int		at %vl 100031100; //Temp haard 2 rechter status
	StatTemp2L:		Int		at %vl 100031200; //Temp haard 2 linker status
	AvgTemp2R:		Int		at %vl 100031106; //Temperatuur 2 meting uitmiddelen rechts
	AvgTemp2L:		Int		at %vl 100031206; //Temperatuur 2 meting uitmiddelen Links
//Analoog in
	AI_Mod:			Int		at %vl 100040000; //Status AI module 
	ComPosKlep1:	Int		at %vl 100040001; //Command register AI 
	mVPosKlep1:		Float	at %vl 100040002; //mV signaal Positie klep 1
	mVPosklep2:		Float	at %vl 100040003; //mV signaal Positie klep 2
	mVIvent:		Float	at %vl 100040004; //mV signaal Positie ventilator stroom
	StatPosKlep1:	Int		at %vl 100041100; //Status Ai klep 1
	StatPosklep2:	Int		at %vl 100041200; //Status Ai klep 2
	StatIvent:		Int		at %vl 100041300; //Status Ivent	
	AvgPosKlep1:	Int		at %vl 100041106; //gemiddelde setting register klep 1
	AvgPosKlep2:	Int		at %vl 100041206; //gemiddelde setting register klep 2
	AvgIvent:		Int		at %vl 100041306; //gemiddelde setting register Ivent
	ConfgPosKlep1:	Int		at %vl 100041107; //configuratie register klep 1
	ConfgPosKlep2:	Int		at %vl 100041207; //configuratie register klep 2
	ConfgIvent:		Int		at %vl 100041307; //configuratie register Ivent
//Analoog uit
	AO_Mod:			Int		at %vl 100050000; //Status AI module 
	SetKlep1:		Int		at %vl 100050002; //MR1 in inc
	SetKlep2:		Int		at %vl 100050003; //MR2 in inc
	ConfSetklep1:	Int		at %vl 100051107; //Configuration of Analog Output 1 --> 5 = 0-10V
	ConfSetKlep2:	Int		at %vl 100051207; //Configuration of Analog Output 1 --> 5 = 0-10V
//Digitaal IO
	IO_Mod:			Int		at %vl 100060000; //Module status register
	ctIventAlm:		Bool	at %IX 100000601; //Contact van ventilatorstroom meter		
	hrIvent:		Bool	at %QX 100000609; //relais ventilator
	hrAlm:			Bool	at %QX 100000610; //relais Alarm

//**********************Programma variabelen en registers******************************
// Email
	nResult:		Int;
	bSendError:		Bool;
// Flags
	bInAuto:		Bool;
	bInErrActive:	Bool;
// Registers
	Offset1:		Int		at %vl 1000000; //Offset B voor Y=AX+B start 40
	Factor1:		Int		at %vl 1000002; //Offset A voor Y=AX+B start 1
	Soll1: 			double;
	Soll1pct:		double;
	AvgTemp1:		Int		at %vl 1000003;
	Offset2:		Int		at %vl 1000004; //Offset B voor Y=AX+B start 40
	Factor2:		Int		at %vl 1000006; //Offset A voor Y=AX+B start 1
	Soll2: 			double;
	Soll2pct:		double;
	AvgTemp2:		Int		at %vl 1000007;
	OffsetIvent:	Int		at %vl 1000008; //Offset B voor Y=AX+B start 0
	FactorIvent:	Int		at %vl 1000010; //Offset A voor Y=AX+B start 1
	IstIvent:		double; //ventilator capaciteit 0% - 100% 
	TotalCap:		int; //capaciteit voor klep 1 en 2 opgeteld 0% - 200%
	//TotalCapScaled:	int; //capaciteit voor klep 1 en 2 opgeteld 0% - 100%
	OffsetKlep1:	Int		at %vl 1000012; //Offset B voor Y=AX+B start 0
	FactorKlep1:	Int		at %vl 1000014; //Offset A voor Y=AX+B start 1
	IstKlep1:		double; //klep positie 0% - 100% 
	OffsetKlep2:	Int		at %vl 1000016; //Offset B voor Y=AX+B start 0
	FactorKlep2:	Int		at %vl 1000018; //Offset A voor Y=AX+B start 1
	IstKlep2:		double; //klep positie 0% - 100% 
	MinTempVent:	Int		at %vl 1000019; //onder deze temperatuur draait de ventilator niet
	deltaTMinTVent:	Int		at %vl 1000020; //Delta T op min = delta T start de ventilator
	//debug2:			int;
	IstVentWeb:		int		at %vl 1000021; //ist vent voor web
	IstKlep1Web:	int		at %vl 1000022; //ist vent voor web
	IstKlep2Web:	int		at %vl 1000023; //ist vent voor web
	SollKlep1Web:	int		at %vl 1000024; //ist vent voor web
	SollKlep2Web:	int		at %vl 1000025; //ist vent voor web	
	mVPosKlep1_0_10:Float;	
	mVPosklep2_0_10:Float;	
	KolomPointer:	int		at %vl 1000026; //
	RijPointer:		int		at %vl 1000027; //
	arIvent: Array[201] Of Array[2] of int;
	RowPointer:		int;
	ColumnPointer:	int;
	IpctVent:		int;
	//IpctVent2:		int;
//**********************Fouten*******************************************
	Ft01_CapaciteitVent:	Bool	at %MX 1; //de vraag capaciteit en de geleverde capiciteti zijn buiten proportie
	Ft02_IventHoog:			Bool	at %MX 2; //Max stroom overschreden
	Ft03_Positieklep1:		Bool	at %MX 3; //Klep 1 positie terug melding niet gelijk aan positie vraag
	Ft04_Positieklep2:		Bool	at %MX 4; //Klep 2 positie terug melding niet gelijk aan positie vraag
	Ft05_ModuleRtd1:		Bool	at %MX 5; //fout in module 2
	Ft06_ModuleRtd2:		Bool	at %MX 6; //fout in module 3
	Ft07_ModuleAI4:			Bool	at %MX 7; //fout in module 4
	Ft08_ModuleAO4:			Bool	at %MX 8; //fout in module 5
	Ft09_ModuleDIO16:		Bool	at %MX 9; //fout in module 6
	Ft10_EmailError:		Bool	at %MX 10; //fout bij verzenden Email
	Ft01_mailSend:			Bool; //send mail 1 keer
	Ft02_mailSend:			Bool; //send mail 1 keer
	Ft03_mailSend:			Bool; //send mail 1 keer
	Ft04_mailSend:			Bool; //send mail 1 keer
	Ft05_mailSend:			Bool; //send mail 1 keer
	Ft06_mailSend:			Bool; //send mail 1 keer
	Ft07_mailSend:			Bool; //send mail 1 keer
	Ft08_mailSend:			Bool; //send mail 1 keer
	Ft09_mailSend:			Bool; //send mail 1 keer
	//debug:					Bool;//voor debug testen
	//debugMailSend:			Bool;//voor debug testen
	//debug3:					int;
	LearnIvent:				Bool	at %MX 11; //array opbouwen om Ivent om te rekenen naar pct
//**********************Timers********************************************
	
	
End_var

Task tMain Autorun
//Init
	hrAlm := False;
	hrIvent := False;
	SetKlep1 := 0;
	SetKlep2 := 0;
//Start temp meting 1
	ComTemp1R := 104;
	ComTemp1R := 107;
	ComTemp1R := 109;
	ComTemp1R := 160;
	ComTemp1L := 104;
	ComTemp1L := 107;
	ComTemp1L := 109;
	ComTemp1L := 160;
//Start temp meting 2
	ComTemp2R := 104;
	ComTemp2R := 107;
	ComTemp2R := 109;
	ComTemp2R := 160;
	ComTemp2L := 104;
	ComTemp2L := 107;
	ComTemp2L := 109;
	ComTemp2L := 160;
//Set uitmideling temperatuur meting	
	AvgTemp1R := 16;
	AvgTemp1L := 16;
	AvgTemp2R := 16;
	AvgTemp2L := 16;
//Config AI
	ConfgPosKlep1 := 5;
	AvgPosKlep1 := 16;
	ConfgPosKlep2 := 5;
	AvgPosKlep2 := 16;
	ConfgIvent := 5;
	AvgIvent := 16;
//Config AO
	ConfSetklep1 := 5;
	ConfSetklep2 := 5;
//Reset fouten
	Ft01_CapaciteitVent := False;
	Ft02_IventHoog := False;
	Ft03_Positieklep1 := False;
	Ft04_Positieklep2 := False;
	Ft05_ModuleRtd1 := False;
	Ft06_ModuleRtd2 := False;
	Ft07_ModuleAI4 := False;
	Ft08_ModuleAO4 := False;
	Ft09_ModuleDIO16 := False;
//Reset Mail send
	Ft01_mailSend := False;
	Ft02_mailSend := False;
	Ft03_mailSend := False;
	Ft04_mailSend := False;
	Ft05_mailSend := False;
	Ft06_mailSend := False;
	Ft07_mailSend := False;
	Ft08_mailSend := False;
	Ft09_mailSend := False;
	bSendError	  := False;
	
	
//**************************************Start Main loop**************************************
	bInAuto := True;
	While bInAuto Do

//**************************************Omreken array opbouwen*******************************
		If LearnIvent then;//start zelfleer loop
			ColumnPointer := 0;//vul eerste kolom van array
			FOR RowPointer := 0 TO 200 DO // for loop
				if RowPointer <= 100 then;//eerste klep 1 dan klep 2
					Soll1 := RowPointer;
					soll2 := 0;
				else	//klep 1 is open start met klep 2
					Soll1 := 100;
					soll2 := RowPointer - 100;
				End_If;
				Soll1 := Soll1 * 0.1; // van % naar mV
				SetKlep1:= soll1* 32767 / 10; // positioneer de klep
				Soll2 := Soll2 * 0.1; // van % naar mV
				SetKlep2:= soll2* 32767 / 10; // positioneer de klep
 			
				While not Limits(IstKlep1,Soll1 * 9,Soll1 * 11) and not Limits(IstKlep2,Soll2 * 9,Soll2 * 11) Do //wachten tot klep in positie
					mVPosKlep1_0_10 := mVPosKlep1*1.25-2.5;//Van 2-10V naar 0-10V
					IstKlep1 := mVPosKlep1_0_10 * 100 / 32767;
					mVPosKlep2_0_10 := mVPosKlep2*1.25-2.5;//Van 2-10V naar 0-10V
					IstKlep2 := mVPosKlep2_0_10 * 100 / 32767;
				End_While;
				arIvent[RowPointer,ColumnPointer] := mVIvent;// assigning values
			
			END_FOR;
			ColumnPointer := 1;//vul de tweede kolom nu blijft 2 open en sluit klep 1 langzaam weer
			FOR RowPointer := 200 TO 0 BY -1 DO// for loop
				if RowPointer <= 100 then;
					Soll2 := RowPointer;//klep 2 sluiten
					soll1 := 0;
				else
					Soll2 := 100;
					soll1 := RowPointer - 100;//klep 1 sluiten
				End_If;
				Soll1 := Soll1 * 0.1; // van % naar mV
				SetKlep1:= soll1* 32767 / 10; // positioneer de klep
				Soll2 := Soll2 * 0.1; // van % naar mV
				SetKlep2:= soll2* 32767 / 10; // positioneer de klep
 			
				While not Limits(IstKlep1,Soll1 * 9,Soll1 * 11) and not Limits(IstKlep2,Soll2 * 9,Soll2 * 11) Do
					mVPosKlep1_0_10 := mVPosKlep1*1.25-2.5;//Van 2-10V naar 0-10V
					IstKlep1 := mVPosKlep1_0_10 * 100 / 32767;
					mVPosKlep2_0_10 := mVPosKlep2*1.25-2.5;//Van 2-10V naar 0-10V
					IstKlep2 := mVPosKlep2_0_10 * 100 / 32767;
				End_While;
				arIvent[RowPointer,ColumnPointer] := mVIvent;// assigning values
			
			END_FOR;

		End_if;
		LearnIvent := False;//loop afgelopen reset flag

//*************************************sturring haard 1***************************************
		AvgTemp1 := (Temp1L + Temp1R)/2; //reken met gem temp
		soll1pct := (Factor1/100) * Avgtemp1 + Offset1; // linair van temp naar % klep open
		Limits(soll1pct,0,100); //altijd tussen 0% en 100%
		//Soll1pct :=  debug2;
		Soll1 := Soll1pct * 0.1; // van % naar mV
		SetKlep1:= soll1* 32767 / 10; // positioneer de klep

//**************************************sturring haard 2**************************************
		AvgTemp2 := (Temp2L + Temp2R)/2; //reken met gem temp
		soll2pct := (Factor2/100) * Avgtemp2 + Offset2; // linair van temp naar % klep open
		Limits(soll2pct,0,100); //altijd tussen 0% en 100%
		//Soll2pct:= debug3;
		Soll2 := Soll2pct * 0.1; // van % naar mV
		SetKlep2:= soll2* 32767 / 10; // positioneer de klep		

//*************************************sturing ventilator**********************************************
		if Temp1L >= (MinTempVent + DeltaTMinTVent) or Temp1R >= (MinTempVent + DeltaTMinTVent) or Temp2L >= (MinTempVent + DeltaTMinTVent) or Temp2R >= (MinTempVent + DeltaTMinTVent) then //Als temp hoog geneog moet de ventilator draaien
			hrIvent := True;
		End_If
		
		if Temp1L < MinTempVent and Temp2L < MinTempVent and Temp1R < MinTempVent and Temp2R < MinTempVent then //ventilator uit als temp laag
			hrIvent := False;
		End_If;		
//*************************************website registers***********************************************
		IstVentWeb := IstIvent;
		Limits(IstVentWeb,0,100);
		IstKlep1Web := IstKlep1;
		IstKlep2Web := IstKlep2;
		SollKlep1Web := Soll1pct;
		SollKlep2Web := Soll2pct;

//************************************Email bewaking************************************************
		if nResult < 0 then
			bSendError := True;
		else	
			bSendError := False;
		End_if;
	End_While;
	
End_Task

Task tError Autorun
	bInErrActive := True;

	While bInErrActive Do
	//*************************************Ft01_CapaciteitVent****************************************
		TotalCap := IstKlep1 + IstKlep2; //tel de capaciteit van beide kleppen samen in hun actuele toestand
		IpctVent := (arIvent[TotalCap,0] + arIvent[TotalCap,1])/2;//wat de stroom waarde zou moeten zijn in mv
		
		FOR RowPointer := 0 TO 200 DO // for loop, zoeken wat de % waarde is van de huidige stroom
			IstIvent := (arIvent[RowPointer,0] + arIvent[RowPointer,1])/2;//neem het gemiddelde van de twee test waarden
			if mVIvent <= IstIvent then//de stroom waarde die net groter of gelijk is aan de zoek waarde overnemen
				IstIvent := RowPointer;//de overeenstemmende % waarde van bijde kleppen samen
				RowPointer := 200;//exit for
			End_If;
		End_For
		
	
		if not Limits(IstIvent,IpctVent - 5,IpctVent + 5) Then;//%waarde binnen +-5%
			Ft01_CapaciteitVent := True;
			if not Ft01_mailSend then
				nResult := EmailSend('/EMAIL/Ft01email.cfg');
				Ft01_mailSend := True;
			End_If
		else
			Ft01_CapaciteitVent := False;
			Ft01_mailSend := False
		End_If
	

	//*************************************Ft02_IventHoog****************************************
		If ctIventAlm or (mVIvent > arIvent[200,0] and mVIvent > arIvent[200,1])  Then //contact geschakeld of stroom hoger dan gemeten waarde bij 200%
			Ft02_IventHoog := True;
			if not Ft02_mailSend then
				nResult := EmailSend('/EMAIL/Ft02email.cfg');
				Ft02_mailSend := True;
			End_If
		Else
			Ft02_IventHoog := False;
			Ft02_mailSend := False;
		End_If;

	//*************************************Ft03_Positieklep1***********************************
		mVPosKlep1_0_10 := mVPosKlep1*1.25-2.5;//Van 2-10V naar 0-10V
		IstKlep1 := mVPosKlep1_0_10 * 100 / 32767;
		if not Limits(Soll1,IstKlep1-25,IstKlep1+5) then;
			Ft03_Positieklep1 := True;
			if not Ft03_mailSend then
				nResult := EmailSend('/EMAIL/Ft03email.cfg');
				Ft03_mailSend := True;
			End_If
		else
			Ft03_Positieklep1 := False;
			Ft03_mailSend := False;
		end_if

	//*************************************Ft04_Positieklep2***********************************
		mVPosKlep2_0_10 := mVPosKlep2*1.25-2.5; //Van 2-10V naar 0-10V
		IstKlep2 := mVPosKlep2_0_10 * 100 / 32767;
		if not Limits(Soll2,IstKlep2-25,IstKlep2+5) then;
			Ft04_Positieklep2 := True;
			if not Ft04_mailSend then
				nResult := EmailSend('/EMAIL/Ft04email.cfg');
				Ft04_mailSend := True;
			End_If
		else
			Ft04_Positieklep2 := False;
			Ft04_mailSend := False;
		end_if
	
	//*************************************Ft05_ModuleRtd1************************************
	//	If StatTemp1L <> 65536 or StatTemp1R <> 65536 or Temp1_ModState <> 0x00210000 Then //bit 16 is hoog alle andere laag bij geen fout or Modulke state fout <> 0x00210000
	//		Ft05_ModuleRtd1 := True;
	//		if not Ft05_mailSend then
	//			nResult := EmailSend('/EMAIL/Ft05email.cfg');
	//			Ft05_mailSend := True;
	//		End_If
	//	Else
	//		Ft05_ModuleRtd1 := False;
	//		Ft05_mailSend := False;
	//	End_If;
	
	////*************************************Ft06_ModuleRtd2************************************
	//	If StatTemp2L <> 65536 or StatTemp2R <> 65536 or Temp2_ModState <> 0x00210000 Then //bit 16 is hoog alle andere laag bij geen fout or Modulke state fout <> 0x00210000
	//		Ft06_ModuleRtd2 := True;
	//		if not Ft06_mailSend then
	//			nResult := EmailSend('/EMAIL/Ft06email.cfg');
	//			Ft06_mailSend := True;
	//		End_If
	//	Else
	//		Ft06_ModuleRtd2 := False;
	//		Ft06_mailSend := False;
	//	End_If;
	
	//*************************************Ft07_ModuleAI4**************************************	
		If AI_Mod <> 0xC1010000 or StatPosKlep1 <> 0x00010000 or StatPosklep2 <> 0x00010000 Then
			Ft07_ModuleAI4 := True;
			if not Ft07_mailSend then
				nResult := EmailSend('/EMAIL/Ft07email.cfg');
				Ft07_mailSend := True;
			End_If
		Else
			Ft07_ModuleAI4 :=False;
			Ft07_mailSend := False;
		End_If;

	//**************************************Ft08_ModuleAO4***************************************
		//If  AO_Mod <> 0 Then
		//	Ft08_ModuleAO4 := True;
		//	if not Ft08_mailSend then
		//		nResult := EmailSend('/EMAIL/Ft08email.cfg');
		//		Ft08_mailSend := True;
		//	End_If
		//Else
		//	Ft08_ModuleAO4 := False;
		//	Ft08_mailSend := False;
		//End_If;

	//**************************************Ft09_ModuleDIO16***************************************
		If  IO_Mod <> 0 Then
			Ft09_ModuleDIO16 := True;
			if not Ft09_mailSend then
				nResult := EmailSend('/EMAIL/Ft09email.cfg');
				Ft09_mailSend := True;
			End_If
		Else
			Ft09_ModuleDIO16 := False;
			Ft09_mailSend := False;
		End_If;
	//*************************************Ft10_EmailError********************************************
		// Ft10_EmailError := bSendError;

	//************************************Error*************************************************
		If 	Ft01_CapaciteitVent or Ft02_IventHoog or Ft03_Positieklep1 or Ft04_Positieklep2  then
			hrAlm := False;
		Else
			hrAlm := True;
		End_If;
	
	////*********************************Dubug testen*****************************************
	//	If debug Then
	//		nResult := 1;
	//		if not debugMailSend then
	//			nResult := EmailSend('/EMAIL/EmailDefaults.cfg');
	//			debugMailSend := True;
	//			debug := False
	//		End_If
	//	Else
	//		debugMailSend := False;
	//	End_If;	
	End_While;	
End_Task

